{
  "NgRx Action Snippet": {
    "prefix": "ngrx-action",
    "body": [
      "import { Action } from '@ngrx/store';",
      "",
      "export const ${1:ACTION_NAME} =           '[${2:MODEL_NAME}] ${3:Action}';",
      "",
      "export class ${3:Action}Action implements Action {",
      "  readonly type = ${1:ACTION_NAME};",
      "",
      "  constructor(public payload: ${4:PAYLOAD_TYPE}) { }",
      "}",
      "",
      "/**",
      " * Export a type alias of all actions in this action group",
      " * so that reducers can easily compose action types",
      " */",
      "export type Actions",
      "  = ${3:Action}Action;"
    ],
    "description": "Angular snippet for NgRx Action"
  },
  "NgRx Actions Multiple Snippet": {
    "prefix": "ngrx-actions-multiple",
    "body": [
      "import { Action } from '@ngrx/store';",
      "",
      "export const ${1:FIRST_ACTION_NAME} =           '[${2:MODEL_NAME}] ${3:FirstAction}';",
      "export const ${4:SECOND_ACTION_NAME} =           '[${2:MODEL_NAME}] ${5:SecondAction}';",
      "",
      "export class ${3:First}Action implements Action {",
      "  readonly type = ${1:FIRST_ACTION_NAME};",
      "",
      "  constructor(public payload: ${6:PAYLOAD_TYPE}) { }",
      "}",
      "",
      "export class ${5:Second}Action implements Action {",
      "    readonly type = ${4:SECOND_ACTION_NAME};",
      "  ",
      "    constructor(public payload: ${7:PAYLOAD_TYPE}) { }",
      "  }",
      "",
      "/**",
      " * Export a type alias of all actions in this action group",
      " * so that reducers can easily compose action types",
      " */",
      "export type Actions",
      "= ${3:First}Action",
      "| ${5:Second}Action;"
    ],
    "description": "Multiple actions snippet for NgRx"
  },
  "NgRx Reducer Snippet": {
    "prefix": "ngrx-reducer",
    "body": [
      "import { Action } from '@ngrx/store';",
      "import { createSelector } from '@ngrx/store';",
      "",
      "export interface ${1:State} {",
      "    ${2}",
      "}",
      "",
      "export const ${3:initialState}: ${1:State} = {",
      "    ${4}",
      "}",
      "",
      "",
      "export function ${5:reducer}(state: ${1:State} = ${3:initialState}, action: Action): ${1:State} {",
      "    switch (action.type) {",
      "",
      "        case ${6:MyAction}:",
      "            // your action code here",
      "            return ${7};",
      "",
      "        default:",
      "            return state;",
      "    }",
      "}",
      "",
      "",
      "/* ",
      "    Below are the selectors for this reducer. Make sure to make compact selectors as per ",
      "    requirements of your application.",
      "*/",
      "",
      "export const ${8:getProperty1} = (state: ${1:State}) => state.${9:property1};",
      "",
      "export const ${10:getProperty2} = (state: ${1:State}) => state.${11:property2};"
    ],
    "description": "Reducer snippet for NgRx"
  },
  "NgRx Effect Snippet": {
    "prefix": "ngrx-effects",
    "body": [
      "import 'rxjs/add/operator/map';",
      "import 'rxjs/add/operator/mergeMap';",
      "",
      "import { Injectable } from '@angular/core';",
      "import { Http } from '@angular/http';",
      "import { Observable } from 'rxjs/Observable';",
      "import { Action } from '@ngrx/store';",
      "import { Actions, Effect, toPayload } from '@ngrx/effects';",
      "import { Store } from '@ngrx/store';",
      "",
      "@Injectable()",
      "export class ${1:MODEL}Effects {",
      "    @Effect() $${2:EFFECT_OBSERVABLE_NAME}: Observable<Action> = this.actions$.ofType(${3:ACTION_TO_LISTEN_TO})",
      "    // Map the payload into JSON to use as the request body",
      "    .map(toPayload)",
      "    .mergeMap(payload => {",
      "        return this.http.${4:METHOD}(${5:PARAMS})",
      "        // If successful, dispatch success action with result",
      "        .map(response => response.json())",
      "        .map((data: any) => {",
      "            //  do stuff you like here and then return success action",
      "            return { type: ${6:SUCCESS_ACTION}, payload: data };",
      "        })",
      "        // If request fails, dispatch failed action",
      "        .catch(() => {",
      "            return of({ type: ${7:ERROR_ACTION} });",
      "        })",
      "    });",
      "",
      "    constructor(",
      "        private http: Http,",
      "        private actions$: Actions",
      "    ) {}",
      "}",
      ""
    ],
    "description": "Effects snippet for NgRx"
  }
}